I want you to help me write a python script, called `unique.py`.
The directory from which that script is called contains a a file `unique_fields.xlsx` (excel format) with five columns. The header row specifies the names: the first column is called `original`, the third column `termid`, the fourth `formphrase`, and the fifth `synonymOf`.
In that directory, there is a subdirectory `terms` that contains markdown files with some yaml frontmatter, and a markdown body. I use `terms directory` to refer to that directory. I use `term file` to refer to a markdown file therein.

The script should process every line of the excel file (ignoring the first line, as it is the header line). In the instructions that follow, I use

- `{today}` to refer to the text in `yyyymmdd` format that represents today's date which I expect you to compute;
- `{<columnname>}` as the name of a variable that holds the contents of the row whose header is `<columnname>` (for example, `{termid}` would be variable that holds the contents of the cell in the row that is processed that is in the column named `termid`).
- `{original}` is the name of a variable tht holds the contents of the cell in the column named `original`, where its contents has been modified by capitalizing the first characgter of every word therein

When reading cells from the excel file, make sure that variables end up being proper texts, so:

- cells must be read to produce texts, not floating point numbers or whatever;
- cells that contain errors, are empty, void, null, NaN or similar, are considered to contain an empty string.

Processing of a line of the excel file is as follows. First, check if there is a term file (in the terms directory) whose name is `{termid}.md`, and create a new file called `_{termid}.md` (in the same directory), to which the end-result of the processing will be written.  Then,
1. if there is such a `{termid}.md` file, then the result of the processing will be a copy of its contents, with the following modifications:
   - if `{formphrase}` contains non-whitespace characters, the line in the frontmatter that starts with `formPhrases`, must be replaced with a line that only contains the text `formPhrases: {formphrase}`.
   - if `{grouptags}` contains non-whitespace characters, its contents must be considered as a comma-separated list of words (each of which is a 'grouptag'). The line in the frontmatter that starts with `grouptags:` and that is followed with a comma separated list of words must then be modified such that every grouptag that is not a word therin, is appended to the list of words, such that the list of words remains a comma-separated word list.
2. if there is no such file, the result is the creation of a new one using the text I specify below, which is all text (including the comments) between the two occurrences of `~~~`, and replace every occurrence of a variable name (e.g., `{termid}`) with its value:

~~~
---
# Docusaurus header
id: {termid}
# TEv2 Curated Text Header
term: {termid}
termType: concept
isa:
glossaryTerm: {original}
glossaryText: "glossary-text for `{original}`."
hoverText: "hover-text for `{original}`."
synonymOf: {synonymOf}
grouptags:
formPhrases: {formphrase}
# Curation status
status: proposed
created: {today}
updated: {today}
# Origins/Acknowledgements
contributors: RieksJ
attribution: "[TNO Terminology Design](https://tno-terminology-design.github.io/tev2-specifications/docs)"
originalLicense: "[CC BY-SA 4.0](http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1)"
---

# {original}

### Summary

:::info Editor's Note
This file has been automatically created; it's header needs to be revised and its contents needs to be properly written.
:::
~~~